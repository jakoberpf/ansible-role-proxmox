name: "Integration Testing"

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  # vagrant-libvirt:
  #   name: "Vagrant - LibVirt"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout the repository to the runner
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9
  #         cache: 'pip'

  #     - name: Enable KVM group perms
  #       run: |
  #         echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
  #         sudo udevadm control --reload-rules
  #         sudo udevadm trigger --name-match=kvm
  #         sudo apt-get update
  #         sudo apt-get install -y libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu qemu-system-x86
  #         sudo usermod -a -G kvm,libvirt $USER

  #     - name: Install apt-caching-proxy, ansible and dependencies
  #       run: |
  #         sudo apt update && sudo apt install qemu-kvm virt-manager virtinst libvirt-dev libvirt-clients libvirt-daemon-system bridge-utils -y
  #         sudo systemctl enable --now libvirtd
  #         sudo systemctl start libvirtd
  #         sudo systemctl status libvirtd
  #         wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
  #         echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
  #         sudo apt update && sudo apt install vagrant -y
  #         vagrant plugin install vagrant-libvirt
  #         python -m pip install --upgrade pip
  #         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #         if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi
  #         if [ -f roles/requirements.yml ]; then ansible-galaxy install -r roles/requirements.yml --force; fi

  #     - name: Cache Vagrant boxes
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.vagrant.d/boxes
  #         key: ${{ runner.os }}-vagrant-${{ hashFiles('Vagrantfile') }}
  #         restore-keys: |
  #           ${{ runner.os }}-vagrant-

  #     - name: Run vagrant up
  #       run: vagrant up --provider=libvirt

  vagrant-virtualbox:
    name: "vagrant - VirtualBox"
    runs-on: macos-12
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Install apt-caching-proxy, ansible and dependencies
        run: |
          # brew install apt-cacher-ng
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi
          if [ -f roles/requirements.yml ]; then ansible-galaxy install -r roles/requirements.yml --force; fi

      - name: Cache Vagrant boxes
        uses: actions/cache@v2
        with:
          path: ~/.vagrant.d/boxes
          key: ${{ runner.os }}-vagrant-${{ hashFiles('Vagrantfile') }}
          restore-keys: |
            ${{ runner.os }}-vagrant-

      - name: Run vagrant up
        run: vagrant up --provider=virtualbox

      # - name: Run ansible-lint
      #   uses: ansible-community/ansible-lint-action@v6.0.2
      #   with:
      #     args: "ansible"

    #   - name: Run ansible playbook
    #     run: |
    #       echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_pass
    #       ansible-playbook plays/main.yaml --vault-password-file .vault_pass

      # - name: Run playbook
      #   uses: dawidd6/action-ansible-playbook@v2
      #   with:
      #     playbook: plays/main.yml
      #     directory: ansible
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     inventory: |
      #       [all]
      #       glacier   ansible_host=172.30.119.142  ansible_user=root
      #       compute-1 ansible_host=172.30.119.190 ansible_user=root
      #       compute-2 ansible_host=172.30.119.87  ansible_user=root
      #       compute-3 ansible_host=172.30.119.79  ansible_user=root
            
      #       [compute]
      #       compute-1
      #       compute-2
      #       compute-3
            
      #       [storage]
      #       glacier
      #     # Optional, encrypted vault password
      #     vault_password: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
      #     # Optional, galaxy requirements filepath
      #     # requirements: galaxy-requirements.yml
      #     # Optional, additional flags to pass to ansible-playbook
      #     # options: |
      #     #   --inventory .hosts
      #     #   --limit group1
      #     #   --extra-vars hello=there
      #     #   --verbose

  # terraform:
  #   name: "Terraform Testing, Validation, Scanning and Deployment"
  #   runs-on: ubuntu-latest
  #   if: ${{ always() }}
  #   needs: ansible
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./terraform
